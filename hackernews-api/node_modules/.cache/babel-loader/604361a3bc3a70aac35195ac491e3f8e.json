{"ast":null,"code":"var _jsxFileName = \"/Users/vesna/Documents/workspace/react-exercises/src/App.js\",\n    _s = $RefreshSig$();\n\n// import \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction getStory(id) {\n  return fetch(`https://hacker-news.firebaseio.com/v0/item/${id}.json?print=pretty`).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n\n    throw new Error(\"Could not fetch story id\");\n  });\n}\n\nfunction App() {\n  _s();\n\n  const [stories, setStories] = useState([]);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [error, setError] = useState(\"\"); //https://hacker-news.firebaseio.com/v0/item/12.json?print=pretty\n  //https://hacker-news.firebaseio.com/v0/topstories.json?print=pretty\n\n  useEffect(() => {\n    fetch(`https://hacker-news.firebaseio.com/v0/newstories.json?print=pretty`).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(\"Could not fetch data\");\n    }).then(myJson => {\n      const myPromises = [];\n\n      for (let id of myJson) {\n        myPromises.push(getStory(id));\n      }\n\n      return Promise.all(myPromises).then(stories => {\n        setStories(stories);\n        setIsLoaded(true);\n      });\n    }); // .catch((err) => setError(err.message));\n  }, []);\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 12\n    }, this);\n  } else if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: stories.map(story => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"by: \", story.by]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: story.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n_s(App, \"jcyEecPWOlToxtodnIYHXPCgf+s=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/vesna/Documents/workspace/react-exercises/src/App.js"],"names":["useState","useEffect","getStory","id","fetch","then","response","ok","json","Error","App","stories","setStories","isLoaded","setIsLoaded","error","setError","myJson","myPromises","push","Promise","all","message","map","story","by","title"],"mappings":";;;AAAA;AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;;;AAEA,SAASC,QAAT,CAAkBC,EAAlB,EAAsB;AACpB,SAAOC,KAAK,CACT,8CAA6CD,EAAG,oBADvC,CAAL,CAELE,IAFK,CAECC,QAAD,IAAc;AACnB,QAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,aAAOD,QAAQ,CAACE,IAAT,EAAP;AACD;;AACD,UAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;AACD,GAPM,CAAP;AAQD;;AAED,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACe,KAAD,EAAQC,QAAR,IAAoBhB,QAAQ,CAAC,EAAD,CAAlC,CAHa,CAKb;AACA;;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,KAAK,CAAE,oEAAF,CAAL,CACGC,IADH,CACSC,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,eAAOD,QAAQ,CAACE,IAAT,EAAP;AACD;;AACD,YAAM,IAAIC,KAAJ,CAAU,sBAAV,CAAN;AACD,KANH,EAOGJ,IAPH,CAOSY,MAAD,IAAY;AAChB,YAAMC,UAAU,GAAG,EAAnB;;AACA,WAAK,IAAIf,EAAT,IAAec,MAAf,EAAuB;AACrBC,QAAAA,UAAU,CAACC,IAAX,CAAgBjB,QAAQ,CAACC,EAAD,CAAxB;AACD;;AACD,aAAOiB,OAAO,CAACC,GAAR,CAAYH,UAAZ,EAAwBb,IAAxB,CAA8BM,OAAD,IAAa;AAC/CC,QAAAA,UAAU,CAACD,OAAD,CAAV;AACAG,QAAAA,WAAW,CAAC,IAAD,CAAX;AACD,OAHM,CAAP;AAID,KAhBH,EADc,CAkBd;AACD,GAnBQ,EAmBN,EAnBM,CAAT;;AAqBA,MAAIC,KAAJ,EAAW;AACT,wBAAO;AAAA,4BAAaA,KAAK,CAACO,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFD,MAEO,IAAI,CAACT,QAAL,EAAe;AACpB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFM,MAEA;AACL,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,6BACE;AAAA,kBAEGF,OAAO,CAACY,GAAR,CAAaC,KAAD,iBACX;AAAA,kCACE;AAAA,+BAASA,KAAK,CAACC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA,sBAAKD,KAAK,CAACE;AAAX;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA,wBADD;AAFH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAiBD;AACF;;GApDQhB,G;;KAAAA,G;AAsDT,eAAeA,GAAf","sourcesContent":["// import \"./App.css\";\nimport { useState, useEffect } from \"react\";\n\nfunction getStory(id) {\n  return fetch(\n    `https://hacker-news.firebaseio.com/v0/item/${id}.json?print=pretty`\n  ).then((response) => {\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error(\"Could not fetch story id\");\n  });\n}\n\nfunction App() {\n  const [stories, setStories] = useState([]);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  //https://hacker-news.firebaseio.com/v0/item/12.json?print=pretty\n  //https://hacker-news.firebaseio.com/v0/topstories.json?print=pretty\n\n  useEffect(() => {\n    fetch(`https://hacker-news.firebaseio.com/v0/newstories.json?print=pretty`)\n      .then((response) => {\n        if (response.ok) {\n          return response.json();\n        }\n        throw new Error(\"Could not fetch data\");\n      })\n      .then((myJson) => {\n        const myPromises = [];\n        for (let id of myJson) {\n          myPromises.push(getStory(id));\n        }\n        return Promise.all(myPromises).then((stories) => {\n          setStories(stories);\n          setIsLoaded(true);\n        });\n      });\n    // .catch((err) => setError(err.message));\n  }, []);\n\n  if (error) {\n    return <div>Error: {error.message}</div>;\n  } else if (!isLoaded) {\n    return <div>Loading...</div>;\n  } else {\n    return (\n      <div className=\"App\">\n        <div>\n          {/* <pre>{JSON.stringify(stories, null, 2)}</pre>{\" \"} */}\n          {stories.map((story) => (\n            <>\n              <h3>by: {story.by}</h3>\n              <h1>{story.title}</h1>\n            </>\n          ))}\n          {/* {data.map((storyId) => (\n            // <div key={storyId}>{JSON.stringify(story.title)}</div>\n            // <div key={storyId}>{story.title}</div>\n          ))} */}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}